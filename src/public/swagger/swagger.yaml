openapi: 3.0.3
info:
  title: Personal Blog
  description: Personal Blog
  termsOfService: http://swagger.io/terms/
  contact:
    email: bangvo.5sense.vn@gmail.com
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0
servers:
  - url: http://localhost:8555/api
    description: Local server

tags:
  - name: Authentication
    description: Login & Register & Logout
  - name: User Management
    description: Manage users

components:
  schemas:
    Jwt:
      type: object
      properties:
        accessToken:
          type: string
          example: "..."
        tokenType:
          type: string
          example: "bearer"
        expiresInMs:
          type: integer
          example: 86400

    LoginRequest:
      type: object
      properties:
        email:
          type: string
          example: bangvo.5sense.vn@gmail.com
        password:
          type: string
          example: admin
      required:
        - email
        - password

    UserRegistrationRequest:
      type: object
      properties:
        name:
          type: string
          example: Tester
        email:
          type: string
          format: email
          example: tester@gmail.com
        password:
          type: string
          example: abc@#123
      required:
        - name
        - email
        - password

    UserList:
      type: array
      items:
        type: object
        properties:
          id:
            type: integer
          name:
            type: string
          email:
            type: string

    UserDetails:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        email:
          type: string
        created_at:
          type: string
          format: date-time  
        updated_at:
          type: string
          format: date-time

    UserUpdateRequest:
      type: object
      properties:
        name:
          type: string
          example: "UpdatedUser"
        email:
          type: string
          example: "updateduser@example.com"
  securitySchemes:
    token:
      type: http
      scheme: bearer
      bearerFormat: JWT
paths:
  /authentication/login:
    post:
      tags:
        - Authentication
      summary: Log in an existing user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: User logged in successfully
          content:
            application/json:
              example:
                message: "Login successful"
                data:
                  $ref: '#/components/schemas/Jwt'
        '401':
          description: Unauthorized

  /user/register:
    post:
      tags:
        - User Management
      summary: Register a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRegistrationRequest'
      responses:
        '201':
          description: User registered successfully
        '400':
          description: Bad request
          content:
            application/json:
              example:
                error: "Invalid input"
      security:
        - token: [ ]

  /users:
    get:
      tags:
        - User Management
      summary: Get all users
      responses:
        '200':
          description: List of users
          content:
            application/json:
              example:
                users:
                  $ref: '#/components/schemas/UserList'
      security:
        - token: [ ]

  /user/{id}:
    get:
      tags:
        - User Management
      summary: Get user by ID
      parameters:
        - name: id
          in: path
          required: true
          description: User ID
          schema:
            type: integer
      responses:
        '200':
          description: User details
          content:
            application/json:
              example:
                $ref: '#/components/schemas/UserDetails'

    put:
      tags:
        - User Management
      summary: Update user by ID
      parameters:
        - name: id
          in: path
          required: true
          description: User ID
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserUpdateRequest'
      responses:
        '200':
          description: User updated successfully

    delete:
      tags:
        - User Management
      summary: Delete user by ID
      parameters:
        - name: id
          in: path
          required: true
          description: User ID
          schema:
            type: integer
      responses:
        '200':
          description: User deleted successfully
