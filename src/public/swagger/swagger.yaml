openapi: 3.0.3
info:
  title: Personal Blog
  description: Personal Blog
  termsOfService: http://swagger.io/terms/
  contact:
    email: bangvo.5sense.vn@gmail.com
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0
servers:
  - url: http://localhost:8555/api
    description: Local server

tags:
  - name: Authentication
    description: Login & Register & Logout
  - name: User Management
    description: Manage users

components:
  schemas:
    Jwt:
      type: object
      properties:
        accessToken:
          type: string
          example: "..."
        tokenType:
          type: string
          example: "bearer"
        expiresInMs:
          type: integer
          example: 86400

    ApiResponse:
      type: object
      properties:
        status:
          type: integer
          description: HTTP status code
        message:
          type: string
          description: Human-readable message
        data:
          type: object
          description: Response data, can be specific to each endpoint
        notFound:
          type: object
          description: Information for 404 (Not Found) response
          properties:
            resource: 
              type: string
              description: Name or type of the resource that was not found
        internalServerError:
          type: object
          description: Information for 500 (Internal Server Error) response
          properties:
            error:
              type: string
              description: Details of the internal server error
        invalidInput:
          type: object
          description: Information for 400 (Bad Request - Invalid Input) response
          properties:
            fields:
              type: array
              items:
                type: string
                description: List of fields with invalid input values
        unauthorized:
          type: object
          description: Information for 401 (Unauthorized) response
          properties:
            error:
              type: string
              description: Details of the unauthorized request

    LoginRequest:
      type: object
      properties:
        email:
          type: string
          example: bangvo.5sense.vn@gmail.com
        password:
          type: string
          example: admin
      required:
        - email
        - password

    UserRegistrationRequest:
      type: object
      properties:
        name:
          type: string
          example: Tester
        email:
          type: string
          format: email
          example: tester@gmail.com
        password:
          type: string
          example: abc@#123
      required:
        - name
        - email
        - password

    UserList:
      type: array
      items:
        type: object
        properties:
          id:
            type: integer
          name:
            type: string
          email:
            type: string

    UserDetails:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        email:
          type: string
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    UserUpdateRequest:
      type: object
      properties:
        name:
          type: string
          example: "UpdatedUser"
        email:
          type: string
          example: "updateduser@example.com"

  securitySchemes:
    token:
      type: http
      scheme: bearer
      bearerFormat: JWT

paths:
  /authentication/login:
    post:
      tags:
        - Authentication
      summary: Log in an existing user
      operationId: loginUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: User logged in successfully
          content:
            application/json:
              example:
                $ref: '#/components/schemas/ApiResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              example:
                $ref: '#/components/schemas/ApiResponse'
        '400':
          description: Bad request - Invalid input
          content:
            application/json:
              example:
                $ref: '#/components/schemas/ApiResponse'
  /authentication/user/{id}:
      get:
        tags:
          - Authentication
        summary: Get user by ID
        operationId: getUserById
        parameters:
          - name: id
            in: path
            required: true
            description: User ID
            schema:
              type: integer
        responses:
          '200':
            description: User details
            content:
              application/json:
                example:
                  $ref: '#/components/schemas/ApiResponse'
          '404':
            description: User not found
            content:
              application/json:
                example:
                  $ref: '#/components/schemas/ApiResponse'
        security:
          - token: [ ]
  /authentication/logout:
    post:
      tags:
        - Authentication
      summary: Log out the current user
      operationId: logoutUser
      responses:
        '200':
          description: User logged out successfully
          content:
            application/json:
              example:
                $ref: '#/components/schemas/ApiResponse'
      security:
        - token: [ ]
  

  /users/register:
    post:
      tags:
        - User Management
      summary: Register a new user
      operationId: registerUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRegistrationRequest'
      responses:
        '201':
          description: User registered successfully
          content:
            application/json:
              example:
                $ref: '#/components/schemas/ApiResponse'
        '400':
          description: Bad request - Invalid input
          content:
            application/json:
              example:
                $ref: '#/components/schemas/ApiResponse'
      security:
        - token: [ ]

  /users:
    get:
      tags:
        - User Management
      summary: Get all users
      operationId: getAllUsers
      responses:
        '200':
          description: List of users
          content:
            application/json:
              example:
                $ref: '#/components/schemas/ApiResponse'
        '404':
          description: Users not found
          content:
            application/json:
              example:
                $ref: '#/components/schemas/ApiResponse'
      security:
        - token: [ ]

    

    /users/put:
      tags:
        - User Management
      summary: Update user by ID
      operationId: updateUserById
      parameters:
        - name: id
          in: path
          required: true
          description: User ID
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserUpdateRequest'
      responses:
        '200':
          description: User updated successfully
          content:
            application/json:
              example:
                $ref: '#/components/schemas/ApiResponse'
        '404':
          description: User not found
          content:
            application/json:
              example:
                $ref: '#/components/schemas/ApiResponse'
        '400':
          description: Bad request - Invalid input
          content:
            application/json:
              example:
                $ref: '#/components/schemas/ApiResponse'

    /users/delete:
      tags:
        - User Management
      summary: Delete user by ID
      operationId: deleteUserById
      parameters:
        - name: id
          in: path
          required: true
          description: User ID
          schema:
            type: integer
      responses:
        '200':
          description: User deleted successfully
          content:
            application/json:
              example:
                $ref: '#/components/schemas/ApiResponse'
        '404':
          description: User not found
          content:
            application/json:
              example:
                $ref: '#/components/schemas/ApiResponse'
